/*
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
*/
#include <iostream>

using namespace std;

long withFor(long n)
{
    long temp = 1;
    long sum = 0;
    for (long i = 2; i < n;)
    {
        if (i % 2 == 0)
        {
            sum += i;
        }
        long oldI = i;
        i = i + temp;
        temp = oldI;
    }
    return sum;
}

/*
There is another beautiful structure hidden beneath this problem:
If we only write the even numbers:
2 8 34 144...
it seems that they obey the following recursive relation: E(n)=4*E(n-1)+E(n-2).
If we can prove that for the Fibonacci numbers the formula F(n)=4*F(n-3)+F(n-6) holds we have proven this recursion.
*/
long withFormula(long n)
{
}

int main()
{
    int t;
    cin >> t;
    for (int a0 = 0; a0 < t; a0++)
    {
        long n;
        cin >> n;
        cout << withFor(n) << endl;
    }
    return 0;
}